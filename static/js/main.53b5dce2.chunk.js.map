{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","length","className","map","todo","onClick","id","key","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","classname","onSubmit","this","htmlFor","type","onChange","Component","App","filter","console","log","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAyBeA,G,MAvBD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAkBf,OAjBaD,EAAME,OACnB,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,8BAEXH,EAAMI,KAAK,SAAAC,GAAI,OACX,yBAAKF,UAAU,yDAAyDG,QAAS,WAAOL,EAAWI,EAAKE,KAAMC,IAAKH,EAAKE,IACpH,4BAAKF,EAAKA,aAQ9B,yBAAKF,UAAU,qFAAoF,6CChBtFM,E,4MACjBC,MAAQ,CACJL,KAAO,I,EAEXM,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVR,KAAMO,EAAEE,OAAOC,S,EAGvBC,aAAe,SAACJ,GACZA,EAAEK,iBACsB,KAApB,EAAKP,MAAML,OAIX,EAAKa,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVR,KAAM,O,uDAKd,OACI,yBAAKF,UAAU,aACX,0BAAMiB,UAAU,MAAMC,SAAUC,KAAKN,cACjC,yBAAKb,UAAU,8BACX,yBAAKA,UAAU,cACX,2BAAOoB,QAAQ,IAAf,kBACA,2BAAOpB,UAAU,eAAeqB,KAAK,OAAOC,SAAUH,KAAKX,aAAeI,MAAOO,KAAKZ,MAAML,e,GA5BnFqB,aCyCtBC,E,4MApCbjB,MAAQ,CACNV,MAAO,CACL,CAACO,GAAG,EAAIF,KAAK,2BACb,CAACE,GAAG,EAAIF,KAAK,iBACb,CAACE,GAAG,EAAIF,KAAK,+B,EAGjBJ,WAAa,SAACM,GACZ,IAAIP,EAAQ,EAAKU,MAAMV,MAAM4B,QAAQ,SAAAvB,GACnC,OAAOA,EAAKE,KAAOA,KAErB,EAAKM,SAAS,CACZb,UAEF6B,QAAQC,IAAI,EAAKpB,MAAMV,Q,EAEzBmB,QAAU,SAACd,GACTA,EAAKE,GAAKwB,KAAKC,SACf,IAAIhC,EAAK,sBAAO,EAAKU,MAAMV,OAAlB,CAAyBK,IAClC,EAAKQ,SAAS,CACZb,W,uDAIF,OACE,yBAAKG,UAAU,wBACb,wBAAIA,UAAU,eAAd,QACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAOH,MAASsB,KAAKZ,MAAMV,MAAOC,WAAcqB,KAAKrB,aACrD,kBAAC,EAAD,CAASkB,QAAWG,KAAKH,gB,GA9BjBO,aCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.53b5dce2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n    const todoList = todos.length ? (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-10 mx-auto\">\r\n                {\r\n                    todos.map( todo => (\r\n                        <div className=\"container alert alert-primary text-center rounded-pill\" onClick={() => {deleteTodo(todo.id)}} key={todo.id}>\r\n                            <h4>{todo.todo}</h4>\r\n                        </div>\r\n                    ))\r\n                }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) : (\r\n        <div className=\"container alert alert-warning text-center col-lg-6 col-md-10 mx-auto rounded-pill\"><h4>No Todos..</h4></div>\r\n    )\r\n        return (\r\n            todoList\r\n        )\r\n}\r\n\r\nexport default Todos","import React, { Component } from 'react'\r\n\r\nexport default class AddTodo extends Component {\r\n    state = {\r\n        todo : ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.todo === ''){\r\n            //pass\r\n        }\r\n        else {\r\n            this.props.addTodo(this.state)\r\n            this.setState({\r\n                todo: ''\r\n        })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <form classname=\"row\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"col-lg-5 col-md-10 mx-auto\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"\">Enter the Todo</label>\r\n                            <input className=\"form-control\" type=\"text\" onChange={this.handleChange}  value={this.state.todo}/>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './Todos'\nimport AddTodo from './AddTodo';\n\n\nclass App extends Component {\n  state = {\n    todos: [\n      {id:1 , todo:'This is an example Todo'},\n      {id:2 , todo:'Tap to delete'},\n      {id:3 , todo:'Try adding your own Todos'},\n    ]\n  }\n  deleteTodo = (id) => { \n    let todos = this.state.todos.filter( todo => {\n      return todo.id !== id\n    } )\n    this.setState({\n      todos\n    });\n    console.log(this.state.todos)\n  }\n  addTodo = (todo) => {\n    todo.id = Math.random()\n    let todos = [...this.state.todos, todo]\n    this.setState({\n      todos\n    })\n  }\n  render () {\n    return (\n      <div className=\"container App-header\">\n        <h1 className=\"text-center\">Todo</h1>\n        <div className=\"container\">\n          <Todos todos = {this.state.todos} deleteTodo = {this.deleteTodo} />\n          <AddTodo addTodo = {this.addTodo} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}